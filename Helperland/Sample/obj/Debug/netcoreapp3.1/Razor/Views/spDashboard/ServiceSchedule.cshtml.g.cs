#pragma checksum "F:\Halperland\Helperland\Sample\Views\spDashboard\ServiceSchedule.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "83ecc15c0a9498ae862d261384ba5077876a1154"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_spDashboard_ServiceSchedule), @"mvc.1.0.view", @"/Views/spDashboard/ServiceSchedule.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "F:\Halperland\Helperland\Sample\Views\_ViewImports.cshtml"
using Sample;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "F:\Halperland\Helperland\Sample\Views\_ViewImports.cshtml"
using Sample.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"83ecc15c0a9498ae862d261384ba5077876a1154", @"/Views/spDashboard/ServiceSchedule.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"57e79f35ab23d95c3437adaa71cb286883eafee9", @"/Views/_ViewImports.cshtml")]
    public class Views_spDashboard_ServiceSchedule : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<IEnumerable<Sample.Models.ServiceRequest>>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"
<div>
    <div class=""ToastBack-card"" id=""ToastBack1"">
        <tr>
            <td>
                <div class=""card-table-tr-toast"">
                    <h4 id=""serviceID"">323436</h4>
                    <hr>
                    <p><img class=""img-table"" src=""images/calendar2.png""> <span id=""date""></span> <img class=""img-table"" src=""images/layer-14.png""> <span id=""time""></span></p>
                    <hr>
                    <p><span id=""Username""></span><br><br><img src=""images/layer-15.png""><span id=""address""></span></p>
                    <hr>
                    <p id=""serviceTime""></p>
                    <p id=""cost""></p>
                    <hr>
                    <p class=""button-center""><button class=""cancel-button"" onclick=""closeToast1()"">Ok</button></p>
                </div>
            </td>
        </tr>
    </div>
    <div id=""calender""></div>
</div>
<div class=""ToastBack"">
    <div class=""ToastContainer"">
        <h3 id=""ToastMessage1"">Login Successful</h3>
     ");
            WriteLiteral("   <button onclick=\"closeToast1()\">Ok</button>\r\n    </div>\r\n</div>\r\n\r\n\r\n\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"


    <script>

        function showMsg1() {
            var back = document.getElementById(""ToastBack1"");
            var cal = document.getElementById(""calender"");
            back.style.height = cal.style.height;
            back.style.width = cal.style.width;
            back.style.display = ""flex"";
        }
        function closeToast1() {
            var back = document.getElementById(""ToastBack1"");
            back.style.display = ""none"";
        }
        $(document).ready(function () {
            var events = [];
            var addresses = [];

            $.ajax({
                url: '/spDashboard/GetEvents',
                type: 'GET',
                success: function (response) {
                    console.log(response);

                    var arrayofdata = response.data;
                    for (let i = 0; i < arrayofdata.length; i++) {
                        var date1 = new Date(arrayofdata[i].serviceStartDate);
                        var month = date1.g");
                WriteLiteral(@"etUTCMonth() + 1; //months from 1-12
                        var day = date1.getUTCDate();
                        var year = date1.getUTCFullYear();
                        var time = date1.toLocaleTimeString();



                        var newdate = year + ""-"" + month + ""-"" + day;
                        var usern = response.user.firstName + "" "" + response.user.lastName;
                        events.push({
                            title: ""Service Request : "" + arrayofdata[i].serviceRequestId,
                            start: new Date(newdate),
                            ServiceHours: arrayofdata[i].serviceHours,
                            ExtraHours: arrayofdata[i].extraHours,
                            TotalCost: arrayofdata[i].totalCost,
                            ServiceRequestId: arrayofdata[i].serviceRequestId,
                            timeForService: time,
                            username: usern
                        });
                        GenerateCalender");
                WriteLiteral(@"(events);
                    }

                },
                error: function (error) {
                    alert(error);
                }
            });

            function GenerateCalender(events) {
                var calendarEl = document.getElementById('calender');
                var calendar = new FullCalendar.Calendar(calendarEl, {
                    events: events,
                    displayEventTime: false,
                    eventClick: function (info) {
                        var id = document.getElementById(""serviceID"");
                        var ids = info.event.extendedProps.ServiceRequestId;
                        var name = document.getElementById(""Username"");
                        var fullName = info.event.extendedProps.username;
                        name.textContent = fullName;
                        var addressText;
                        var formData = new FormData();
                        formData.append(""id"",ids);
                        ");
                WriteLiteral(@"$.ajax({
                            type: 'POST',
                            url: '/spDashboard/getAddresses',
                            data: formData,
                            processData: false,
                            contentType: false,
                        }).done(function (response) {
                            if (response.status == ""success"") {
                                addressText = response.data.addressLine1 + "", "" + response.data.addressLine2 + "", "" + response.data.city + "", "" + response.data.state;
                                var UserAdd = document.getElementById(""address"");
                                UserAdd.textContent = addressText;
                            } else {
                                alert(""something went wrong"");
                            }
                        });

                        var date = document.getElementById(""date"");
                        var time = document.getElementById(""time"");
                        ");
                WriteLiteral(@"var totalHRS = document.getElementById(""serviceTime"");
                        var cost = document.getElementById(""cost"");
                        id.textContent =""Service ID : "" + info.event.extendedProps.ServiceRequestId;
                        var date1 = info.event.start;
                        var month = date1.getUTCMonth() + 1; //months from 1-12
                        var day = date1.getDate();
                        var year = date1.getUTCFullYear();
                        var newdate = year + ""-"" + month + ""-"" + day;
                        date.textContent = newdate;
                        time.textContent = info.event.extendedProps.timeForService;
                        totalHRS.innerHTML = ""Total service hours : "" + (info.event.extendedProps.ServiceHours + info.event.extendedProps.ExtraHours) + "" HRS"";
                        cost.innerHTML = ""Total service cost : "" + info.event.extendedProps.TotalCost;
                        showMsg1();
");
                WriteLiteral("                    },\r\n                    validRange: {\r\n                        start: new Date()\r\n                    }\r\n                })\r\n                calendar.render();\r\n            }\r\n\r\n\r\n        });\r\n    </script>\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IEnumerable<Sample.Models.ServiceRequest>> Html { get; private set; }
    }
}
#pragma warning restore 1591
